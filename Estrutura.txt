Estrutura:

Provedor/
	compose.yaml
	proxy/
		dockerfile
		config/
			default.conf
			nginx.conf
			ssl/
				nginx-selfsigned.crt
				nginx-selfsigned.key
	dns/
		dockerfile
		config/
			db.praia.domeio.com
			named.conf.local
	email/
    dockerfile
    Config/
      dovecot.conf
      main.cf

Arquivos de config:

Provedor
  compose.yaml:

    services:    
      
      dns:
        build:
          context: ./Containers/DNS
          dockerfile: Dockerfile
        image: dns
        container_name: dns
        ports:
          - "53:53/tcp"
          - "53:53/udp"
        networks:
          - beach-network
        volumes:
          - ./Containers/DNS/Config/db.praia.domeio.com:/etc/bind/db.beach.com
          - ./Containers/DNS/Config/named.conf.local:/etc/bind/named.conf.local
        
      proxy:
        build:
          context: ./Containers/PROXY
          dockerfile: Dockerfile
        image: proxy
        container_name: proxy
        ports:
          - "80:80"
          - "443:443"
        depends_on:
          - dns
        networks:
          - beach-network
        volumes:
          - ./Containers/PROXY/Config/default.conf:/etc/nginx/conf.d/default.conf
          - ./Containers/PROXY/Config/nginx.conf:/etc/nginx/nginx.conf
          - ./Containers/PROXY/Config/ssl:/etc/nginx/ssl
      
      email:
        build:
          context: ./Containers/MAIL
          dockerfile: Dockerfile
        image: email
        container_name: email
        ports:
          - "25:25/tcp"
          - "587:587/tcp"
          - "110:110/tcp"
          - "143:143/tcp"
        networks:
          - beach-network
        volumes:
          - ./Containers/MAIL/Config/main.cf:/etc/postfix/main.cf
          - ./Containers/MAIL/Config/dovecot.conf:/etc/dovecot/dovecot.conf

    networks:
      beach-network:
        driver: bridge

  DNS:
    <>
    db.praia.domeio.com:

      ;
      ; BIND data file for local loopback interface
      ;
      $ORIGIN praia.domeio.com.
      $TTL	604800

      @   IN  SOA ns.praia.domeio.com. root.praia.domeio.com. (
                  1		; Serial
            604800		; Refresh
              86400		; Retry
            2419200		; Expire
            604800 )	; Negative Cache TTL
      ;
      @	IN	NS	ns.praia.domeio.com.
      @	IN	MX	10	mail.praia.domeio.com.
      @	IN	A	10.0.2.15

      ns      IN  A   10.0.2.15
      mail    IN  A   10.0.2.15
      www     IN  A   10.0.2.15
      proxy   IN  CNAME www

    <>
    named.conf.local:

      //
      // Do any local configuration here
      //

      // Consider adding the 1918 zones here, if they are not used in your
      // organization
      //include "/etc/bind/zones.rfc1918";


      zone "praia.domeio.com"{
          type master;
          file "/etc/bind/db.beach.com";
          allow-transfer{ any; };
      };

      <>

    <>
    dockerfile do dns:

    FROM ubuntu:latest

    RUN apt update -y
    RUN apt-get update
    RUN apt upgrade -y
    RUN apt install vim net-tools -y
    RUN apt install bind9 dnsutils -y

    EXPOSE 53/tcp
    EXPOSE 53/udp

    #COPY ./bind/named.conf.local /etc/bind/
    #COPY ./bind/db.asa.br /etc/bind/

    CMD ["/usr/sbin/named", "-g", "-c", "/etc/bind/named.conf", "-u", "bind"]

  PROXY:
    <>
    default.conf:

      server {
          listen 443 ssl default_server;
          server_name proxy.praia.domeio.com;

          ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
          ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

          access_log /var/log/nginx/access.log main;
          error_log /var/log/nginx/error.log debug;

          location / {
              return 200 'Proxy est√° configurado corretamente!';
              add_header Content-Type text/plain;
          }
      }

      server {
          listen 80;
          server_name proxy.praia.domeio.com;

          # Redirecionar HTTP para HTTPS
          return 301 https://$host$request_uri;
      }

    <>
    nginx.conf:

    user nginx;

    worker_processes  auto;

    #error_log  /var/log/nginx/error.log crit;
    error_log  /var/log/nginx/error.log error;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }

    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    # add_header X-Content-Type-Options nosniff;


    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # add_header X-XSS-Protection "1; mode=block";

    # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
    # you can tell the browser that it can only download content from the domains you explicitly allow
    # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
    # https://www.owasp.org/index.php/Content_Security_Policy
    # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
    # directives for css and js(if you have inline css or js, you will need to keep it too).
    # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful

    #add_header Content-Security-Policy "default-src 'self' trusted.example.com;";
    #add_header Content-Security-Policy "style-src 'self' 'unsafe-inline' 'unsafe-eval' trusted.example.com;";
    #add_header Content-Security-Policy "script-src 'self' trusted.example.com;";
    #add_header Content-Security-Policy "frame-src 'self' trusted.example.com;";
    #add_header Content-Security-Policy "image-src 'self' trusted.example.com;";
    #add_header Content-Security-Policy "object-src 'none'";

    # config to enable HSTS(HTTP Strict Transport Security) 
    # https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    # also https://hstspreload.org/
    # AWS LB with htts enabled
    #add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        # access_log  /var/log/nginx/access.log  main;
        # to boost I/O on HDD we can disable access logs
        # access_log off;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  30;

        gzip  on;

        # allow the server to close connection on non responding client, this will free up memory
        reset_timedout_connection on;

        # request timed out -- default 60
        client_body_timeout 15;
        client_max_body_size 10M;
        # if client stop responding, free up memory -- default 60
        send_timeout 15;

        include /etc/nginx/conf.d/*.conf;
    }

  MAIL:
  <>
  dovecot.conf:

    ## Dovecot configuration file

    # If you're in a hurry, see http://wiki2.dovecot.org/QuickConfiguration

    # "doveconf -n" command gives a clean output of the changed settings. Use it
    # instead of copy&pasting files when posting to the Dovecot mailing list.

    # '#' character and everything after it is treated as comments. Extra spaces
    # and tabs are ignored. If you want to use either of these explicitly, put the
    # value inside quotes, eg.: key = "# char and trailing whitespace  "

    # Most (but not all) settings can be overridden by different protocols and/or
    # source/destination IPs by placing the settings inside sections, for example:
    # protocol imap { }, local 127.0.0.1 { }, remote 10.0.0.0/8 { }

    # Default values are shown for each setting, it's not required to uncomment
    # those. These are exceptions to this though: No sections (e.g. namespace {})
    # or plugin settings are added by default, they're listed only as examples.
    # Paths are also just examples with the real defaults being based on configure
    # options. The paths listed here are for configure --prefix=/usr
    # --sysconfdir=/etc --localstatedir=/var

    # Enable installed protocols
    !include_try /usr/share/dovecot/protocols.d/*.protocol

    # A comma separated list of IPs or hosts where to listen in for connections. 
    # "*" listens in all IPv4 interfaces, "::" listens in all IPv6 interfaces.
    # If you want to specify non-default ports or anything more complex,
    # edit conf.d/master.conf.
    #listen = *, ::

    # Base directory where to store runtime data.
    #base_dir = /var/run/dovecot/

    # Name of this instance. In multi-instance setup doveadm and other commands
    # can use -i <instance_name> to select which instance is used (an alternative
    # to -c <config_path>). The instance name is also added to Dovecot processes
    # in ps output.
    #instance_name = dovecot

    # Greeting message for clients.
    #login_greeting = Dovecot ready.

    # Space separated list of trusted network ranges. Connections from these
    # IPs are allowed to override their IP addresses and ports (for logging and
    # for authentication checks). disable_plaintext_auth is also ignored for
    # these networks. Typically you'd specify your IMAP proxy servers here.
    #login_trusted_networks =

    # Space separated list of login access check sockets (e.g. tcpwrap)
    #login_access_sockets = 

    # With proxy_maybe=yes if proxy destination matches any of these IPs, don't do
    # proxying. This isn't necessary normally, but may be useful if the destination
    # IP is e.g. a load balancer's IP.
    #auth_proxy_self =

    # Show more verbose process titles (in ps). Currently shows user name and
    # IP address. Useful for seeing who are actually using the IMAP processes
    # (eg. shared mailboxes or if same uid is used for multiple accounts).
    #verbose_proctitle = no

    # Should all processes be killed when Dovecot master process shuts down.
    # Setting this to "no" means that Dovecot can be upgraded without
    # forcing existing client connections to close (although that could also be
    # a problem if the upgrade is e.g. because of a security fix).
    #shutdown_clients = yes

    # If non-zero, run mail commands via this many connections to doveadm server,
    # instead of running them directly in the same process.
    #doveadm_worker_count = 0
    # UNIX socket or host:port used for connecting to doveadm server
    #doveadm_socket_path = doveadm-server

    # Space separated list of environment variables that are preserved on Dovecot
    # startup and passed down to all of its child processes. You can also give
    # key=value pairs to always set specific settings.
    #import_environment = TZ

    ##
    ## Dictionary server settings
    ##

    # Dictionary can be used to store key=value lists. This is used by several
    # plugins. The dictionary can be accessed either directly or though a
    # dictionary server. The following dict block maps dictionary names to URIs
    # when the server is used. These can then be referenced using URIs in format
    # "proxy::<name>".

    dict {
      #quota = mysql:/etc/dovecot/dovecot-dict-sql.conf.ext
    }

    # Most of the actual configuration gets included below. The filenames are
    # first sorted by their ASCII value and parsed in that order. The 00-prefixes
    # in filenames are intended to make it easier to understand the ordering.
    !include conf.d/*.conf

    # A config file can also tried to be included without giving an error if
    # it's not found:
    !include_try local.conf

  <>
  main.cf:

    # See /usr/share/postfix/main.cf.dist for a commented, more complete version


    # Debian specific:  Specifying a file name will cause the first
    # line of that file to be used as the name.  The Debian default
    # is /etc/mailname.

    # myorigin = /etc/mailname
    myorigin = praia.domeio.com

    # smtpd_banner = $myhostname ESMTP $mail_name (Ubuntu)
    smtpd_banner = ASA ESMTP Server
    biff = no

    # appending .domain is the MUA's job.
    append_dot_mydomain = no

    # Uncomment the next line to generate "delayed mail" warnings
    #delay_warning_time = 4h

    readme_directory = no

    # See http://www.postfix.org/COMPATIBILITY_README.html -- default to 3.6 on
    # fresh installs.
    compatibility_level = 3.6



    # TLS parameters
    smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
    smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
    smtpd_tls_security_level=may

    smtp_tls_CApath=/etc/ssl/certs
    smtp_tls_security_level=may
    smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache


    smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination
    # myhostname = localhost
    myhostname = mail.praia.domeio.com
    alias_maps = hash:/etc/aliases
    alias_database = hash:/etc/aliases
    #mydestination = $myhostname, localhost, localhost.localdomain, localhost
    mydestination =$myhostname, localhost, localhost.localdomain, localhost
    relayhost = 
    mynetworks = 127.0.0.0/8 10.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
    mailbox_size_limit = 0
    recipient_delimiter = +
    inet_interfaces = all
    inet_protocols = all

  <>
  dockerfile_email:

    FROM ubuntu:latest

    RUN apt update --fix-missing -y

    RUN apt upgrade -y

    RUN apt-get update

    RUN apt-get install postfix dovecot-imapd dovecot-pop3d syslog-ng -y

    #COPY main.cf /etc/postfix

    #adicionar usu√°rio
    RUN useradd -m usuario
    RUN useradd -m usuario2

    RUN echo "usuario:redes" | chpasswd
    RUN echo "usuario2:redes" | chpasswd

    CMD ["sh", "-c", "service syslog-ng start ; service postfix start ; service dovecot start; tail -F /var/log/mail.log"]

