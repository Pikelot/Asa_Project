Estrutura:
Provedor/
	compose.yaml
	proxy/
		dockerfile
		config/
			default.conf
			nginx.conf
			ssl/
				nginx-selfsigned.crt
				nginx-selfsigned.key
	dns/
		dockerfile
		config/
			db.praia.domeio.com
			named.conf.local
	email/

Arquivos de config:

<>

compose.yaml:

services:    
  dns:
    build:
      context: ./Containers/DNS
      dockerfile: Dockerfile
    image: dns
    container_name: dns
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    networks:
      - beach-network
    volumes:
      - ./Containers/DNS/Config/db.praia.domeio.com:/etc/bind/db.beach.com
      - ./Containers/DNS/Config/named.conf.local:/etc/bind/named.conf.local
    
  proxy:
    build:
      context: ./Containers/PROXY
      dockerfile: Dockerfile
    image: proxy
    container_name: proxy
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - dns
    networks:
      - beach-network
    volumes:
      - ./Containers/PROXY/Config/default.conf:/etc/nginx/conf.d/default.conf
      - ./Containers/PROXY/Config/nginx.conf:/etc/nginx/nginx.conf
      - ./Containers/Proxy/config/ssl:/etc/nginx/ssl
        
networks:
  beach-network:
    driver: bridge
        
networks:
  beach-network:
    driver: bridge
<>

db.praia.domeio.com:

;
; BIND data file for local loopback interface
;
$ORIGIN praia.domeio.com.
$TTL	604800

@   IN  SOA ns.praia.domeio.com. root.praia.domeio.com. (
			      1		; Serial
			 604800		; Refresh
			  86400		; Retry
			2419200		; Expire
			 604800 )	; Negative Cache TTL
;
@	IN	NS	ns.praia.domeio.com.
@	IN	MX	10	mail.praia.domeio.com.
@	IN	A	10.0.2.15

ns      IN  A   10.0.2.15
mail    IN  A   10.0.2.15
www     IN  A   10.0.2.15
proxy   IN  CNAME www

<>

named.conf.local:

//
// Do any local configuration here
//

// Consider adding the 1918 zones here, if they are not used in your
// organization
//include "/etc/bind/zones.rfc1918";


zone "praia.domeio.com"{
    type master;
    file "/etc/bind/db.beach.com";
    allow-transfer{ any; };
};

<>

dockerfile do dns:

FROM ubuntu:latest

RUN apt update -y
RUN apt-get update
RUN apt upgrade -y
RUN apt install vim net-tools -y
RUN apt install bind9 dnsutils -y

EXPOSE 53/tcp
EXPOSE 53/udp

#COPY ./bind/named.conf.local /etc/bind/
#COPY ./bind/db.asa.br /etc/bind/

CMD ["/usr/sbin/named", "-g", "-c", "/etc/bind/named.conf", "-u", "bind"]

<>

default.conf:

server {
    listen 443 ssl default_server;
    server_name proxy.praia.domeio.com;

    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log debug;

    location / {
        return 200 'Proxy est√° configurado corretamente!';
        add_header Content-Type text/plain;
    }
}

server {
    listen 80;
    server_name proxy.praia.domeio.com;

    # Redirecionar HTTP para HTTPS
    return 301 https://$host$request_uri;
}

<>

nginx.conf:

user nginx;

worker_processes  auto;

#error_log  /var/log/nginx/error.log crit;
error_log  /var/log/nginx/error.log error;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

# config to don't allow the browser to render the page inside an frame or iframe
# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options

# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
# add_header X-Content-Type-Options nosniff;


# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# add_header X-XSS-Protection "1; mode=block";

# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
# directives for css and js(if you have inline css or js, you will need to keep it too).
# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful

#add_header Content-Security-Policy "default-src 'self' trusted.example.com;";
#add_header Content-Security-Policy "style-src 'self' 'unsafe-inline' 'unsafe-eval' trusted.example.com;";
#add_header Content-Security-Policy "script-src 'self' trusted.example.com;";
#add_header Content-Security-Policy "frame-src 'self' trusted.example.com;";
#add_header Content-Security-Policy "image-src 'self' trusted.example.com;";
#add_header Content-Security-Policy "object-src 'none'";

# config to enable HSTS(HTTP Strict Transport Security) 
# https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
# to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
# also https://hstspreload.org/
# AWS LB with htts enabled
#add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  /var/log/nginx/access.log  main;
    # to boost I/O on HDD we can disable access logs
    # access_log off;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  30;

    gzip  on;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 15;
    client_max_body_size 10M;
    # if client stop responding, free up memory -- default 60
    send_timeout 15;

    include /etc/nginx/conf.d/*.conf;
}

